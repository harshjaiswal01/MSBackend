openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users, user details, subscriptions, vision boards, and content items.

servers:
  - url: http://localhost:5000
    description: Local server

tags:
  - name: Users
    description: Operations related to user management
  - name: User Details
    description: Operations related to user details
  - name: Subscriptions
    description: Operations related to user subscriptions
  - name: Vision Boards
    description: Operations related to vision boards
  - name: Content Items
    description: Operations related to content items within vision boards
  - name: Calendar
    description: Operations related to the user and reference calendars
  - name: Questionnaire
    description: Operations related to user questionnaires
  - name: Google OAuth
    description: Google OAuth login and callback endpoints

paths:
  /login/google:
    get:
      tags:
        - Google OAuth
      summary: Google OAuth login
      description: Initiate Google OAuth login flow
      responses:
        '302':
          description: Redirect to Google for authentication

  /login/google/callback:
    get:
      tags:
        - Google OAuth
      summary: Google OAuth callback
      description: Callback URL for Google OAuth
      parameters:
        - name: state
          in: query
          required: true
          schema:
            type: string
        - name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User successfully logged in with Google OAuth
        '400':
          description: Invalid request or missing nonce
        '500':
          description: Server error during the OAuth process
  /register:
    post:
      tags:
        - Users
      summary: Register a new user
      description: Register a new user and return the user details along with a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: "yourpassword"
                first_name:
                  type: string
                  example: "John"
                last_name:
                  type: string
                  example: "Doe"
      responses:
        201:
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: test@example.com
                      first_name:
                        type: string
                        example: John
                      last_name:
                        type: string
                        example: Doe
                  token:
                    type: string
                    description: JWT token for the registered user
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        400:
          description: Bad Request (e.g., missing fields, validation errors)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation error: Email already exists"

  /login:
    post:
      tags:
        - Users
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful, returns a token and user information
        '401':
          description: Unauthorized

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
        '404':
          description: User not found

  /users/{id}/admin:
    put:
      tags:
        - Users
      summary: Update a user to admin
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User updated to admin
        '404':
          description: User not found

  /users/{id}/update-name:
    put:
      tags:
        - Users
      summary: Update user's first and last name
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
      responses:
        '200':
          description: User name updated successfully
        '404':
          description: User not found
  /user_details:
    post:
      tags:
        - User Details
      summary: Create user details
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        '201':
          description: User details created successfully
        '400':
          description: Bad request

  /user_details/{id}:
    get:
      tags:
        - User Details
      summary: Get user details by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
        '404':
          description: User details not found

    put:
      tags:
        - User Details
      summary: Update user details by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        '200':
          description: User details updated successfully
        '404':
          description: User details not found

  /users/{user_id}/subscriptions:
    put:
      tags:
        - Subscriptions
      summary: Update user subscription preferences
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscription'
      responses:
        '200':
          description: Subscription updated successfully
        '404':
          description: User not found
  /vision-boards:
    post:
      tags:
        - Vision Boards
      summary: Create a vision board
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisionBoard'
      responses:
        '201':
          description: Vision board created successfully
        '400':
          description: Bad request

  /vision-boards/{vision_board_id}:
    get:
      tags:
        - Vision Boards
      summary: Get a vision board by ID
      security:
        - BearerAuth: []
      parameters:
        - name: vision_board_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Vision board details
        '404':
          description: Vision board not found

    put:
      tags:
        - Vision Boards
      summary: Update a vision board by ID
      security:
        - BearerAuth: []
      parameters:
        - name: vision_board_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisionBoard'
      responses:
        '200':
          description: Vision board updated successfully
        '404':
          description: Vision board not found

    delete:
      tags:
        - Vision Boards
      summary: Delete a vision board by ID
      security:
        - BearerAuth: []
      parameters:
        - name: vision_board_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Vision board deleted successfully
        '404':
          description: Vision board not found

  /users/{user_id}/vision-boards:
    get:
      tags:
        - Vision Boards
      summary: Get all vision boards for a user
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of vision boards
        '404':
          description: User not found

    post:
      tags:
        - Vision Boards
      summary: Add a vision board to a user
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVisionBoard'
      responses:
        '201':
          description: Vision board added to user
        '404':
          description: User not found

  /vision-boards/{vision_board_id}/content:
    post:
      tags:
        - Content Items
      summary: Add a content item to a vision board
      security:
        - BearerAuth: []
      parameters:
        - name: vision_board_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentItem'
      responses:
        '201':
          description: Content item added to vision board
        '400':
          description: Bad request

  /vision-boards/content/{content_item_id}:
    put:
      tags:
        - Content Items
      summary: Update a content item in a vision board
      security:
        - BearerAuth: []
      parameters:
        - name: content_item_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentItem'
      responses:
        '200':
          description: Content item updated successfully
        '404':
          description: Content item not found

    delete:
      tags:
        - Content Items
      summary: Delete a content item from a vision board
      security:
        - BearerAuth: []
      parameters:
        - name: content_item_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Content item deleted successfully
        '404':
          description: Content item not found
  /reference_calendar:
    post:
      tags:
        - Calendar
      summary: Create a reference calendar entry
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferenceCalendar'
      responses:
        '201':
          description: Reference calendar entry created
        '400':
          description: Bad request

  /reference_calendar/{id}:
    get:
      tags:
        - Calendar
      summary: Get a reference calendar entry by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reference calendar entry details
        '404':
          description: Reference calendar entry not found

    put:
      tags:
        - Calendar
      summary: Update a reference calendar entry by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReferenceCalendar'
      responses:
        '200':
          description: Reference calendar entry updated
        '404':
          description: Reference calendar entry not found

    delete:
      tags:
        - Calendar
      summary: Delete a reference calendar entry by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Reference calendar entry deleted
        '404':
          description: Reference calendar entry not found

  /users/{user_id}/calendar:
    get:
      tags:
        - Calendar
      summary: Get all calendar events for a user
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of calendar events
        '404':
          description: No calendar events found for this user

  /users/{user_id}/calendar/custom:
    post:
      tags:
        - Calendar
      summary: Add a custom event to the user's calendar
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCalendarEvent'
      responses:
        '201':
          description: Custom event added to calendar
        '400':
          description: Bad request

  /users/{user_id}/calendar/custom/{event_id}:
    put:
      tags:
        - Calendar
      summary: Update a custom event in the user's calendar
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
        - name: event_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCalendarEvent'
      responses:
        '200':
          description: Custom event updated successfully
        '404':
          description: Custom event not found

    delete:
      tags:
        - Calendar
      summary: Delete a custom event from the user's calendar
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
        - name: event_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Custom event deleted successfully
        '404':
          description: Custom event not found

  /questionnaire:
    get:
      tags:
        - Questionnaire
      summary: Get available vision boards for questionnaire
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of available vision boards

  /questionnaire/submit:
    post:
      tags:
        - Questionnaire
      summary: Submit selected vision boards
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selected_vision_boards:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Vision boards submitted successfully

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string

    UserDetails:
      type: object
      properties:
        id:
          type: integer
        sex:
          type: string
        pronouns:
          type: string
        due_date:
          type: string
          format: date
        first_pregnancy:
          type: boolean
        phone:
          type: string
        can_receive_texts:
          type: boolean

    Subscription:
      type: object
      properties:
        newsletter:
          type: boolean
        sms_notifications:
          type: boolean

    VisionBoard:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created_by_admin:
          type: boolean

    UserVisionBoard:
      type: object
      properties:
        vision_board_id:
          type: integer

    ContentItem:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
        title:
          type: string
        description:
          type: string
        date_created:
          type: string
          format: date
        main_image:
          type: string

    ReferenceCalendar:
      type: object
      properties:
        id:
          type: integer
        day_of_pregnancy:
          type: integer
        description:
          type: string

    UserCalendarEvent:
      type: object
      properties:
        id:
          type: integer
        event_date:
          type: string
          format: date
        description:
          type: string
